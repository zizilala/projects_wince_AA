; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\BSP_COMMON\DISPLAY\lcd_vga.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|lcd_res_params| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|bDVIEnabled| %	0x4

  00000			 AREA	 |.data|, DATA
|lcd_res_params| DCD 0x6
	DCD	0x140
	DCD	0xf0
	DCD	0x1
	DCD	0x12
	DCD	0x46
	DCD	0x1
	DCD	0xa
	DCD	0xd
	DCD	0x1
	DCD	0x4
	DCD	0x9
	DCD	0x0
	DCD	0x23000
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x6
	DCD	0x280
	DCD	0x1e0
	DCD	0x3f
	DCD	0xf
	DCD	0x4f
	DCD	0x1
	DCD	0xa
	DCD	0x21
	DCD	0x1
	DCD	0x2
	DCD	0x11
	DCD	0x0
	DCD	0x23000
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x6
	DCD	0x280
	DCD	0x1e0
	DCD	0x27
	DCD	0x17
	DCD	0x7f
	DCD	0x2
	DCD	0x9
	DCD	0x1c
	DCD	0x1
	DCD	0x4
	DCD	0x7
	DCD	0x0
	DCD	0x23000
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x6
	DCD	0x320
	DCD	0x1e0
	DCD	0x37
	DCD	0x1f
	DCD	0x87
	DCD	0x2
	DCD	0x46
	DCD	0x44
	DCD	0x1
	DCD	0x2
	DCD	0xb
	DCD	0x0
	DCD	0x20000
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x6
	DCD	0x320
	DCD	0x258
	DCD	0x3f
	DCD	0x27
	DCD	0x97
	DCD	0x3
	DCD	0x1
	DCD	0x17
	DCD	0x1
	DCD	0x2
	DCD	0xb
	DCD	0x0
	DCD	0x20000
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x6
	DCD	0x320
	DCD	0x258
	DCD	0x3f
	DCD	0x17
	DCD	0x87
	DCD	0x1
	DCD	0x1
	DCD	0x16
	DCD	0x1
	DCD	0x4
	DCD	0x6
	DCD	0x0
	DCD	0x20000
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x6
	DCD	0x400
	DCD	0x300
	DCD	0x3f
	DCD	0x17
	DCD	0xe7
	DCD	0x5
	DCD	0x3
	DCD	0x1d
	DCD	0x1
	DCD	0x2
	DCD	0x7
	DCD	0x0
	DCD	0x20000
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x6
	DCD	0x500
	DCD	0x2d0
	DCD	0x3f
	DCD	0x3f
	DCD	0xff
	DCD	0x4
	DCD	0x3
	DCD	0x14
	DCD	0x1
	DCD	0x2
	DCD	0x6
	DCD	0x0
	DCD	0x26000
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x6
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
|g_dwSelectedDSSResolution| DCD 0x8

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|LcdPdd_LCD_InitResolution|
	EXPORT	|??_C@_1DM@JHFBIJGB@?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAL?$AAC?$AAD?$AA_?$AAV?$AAB?$AAP?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@MMOBHECK@?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAL?$AAC?$AAD?$AA_?$AAV?$AAF?$AAP?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@PDNLKEIH@?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAL?$AAC?$AAD?$AA_?$AAV?$AAS?$AAW?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@EMLMGKHA@?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAL?$AAC?$AAD?$AA_?$AAH?$AAB?$AAP?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@BHAMJHDL@?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAL?$AAC?$AAD?$AA_?$AAH?$AAF?$AAP?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@CIDGEHJG@?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAL?$AAC?$AAD?$AA_?$AAH?$AAS?$AAW?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|GetDisplayResolutionFromBootArgs|
; File c:\wince600\platform\z2170p\src\bsp_common\display\lcd_vga.c

  00000			 AREA	 |.pdata|, PDATA
|$T46267| DCD	|$LN18@LcdPdd_LCD|
	DCD	0x40004b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@JHFBIJGB@?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAL?$AAC?$AAD?$AA_?$AAV?$AAB?$AAP?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "L"
	DCB	0x0, "C", 0x0, "D", 0x0, "_", 0x0, "V", 0x0, "B", 0x0, "P"
	DCB	0x0, " ", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "o"
	DCB	0x0, "f", 0x0, " ", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "g"
	DCB	0x0, "e", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@MMOBHECK@?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAL?$AAC?$AAD?$AA_?$AAV?$AAF?$AAP?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "L"
	DCB	0x0, "C", 0x0, "D", 0x0, "_", 0x0, "V", 0x0, "F", 0x0, "P"
	DCB	0x0, " ", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "o"
	DCB	0x0, "f", 0x0, " ", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "g"
	DCB	0x0, "e", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@PDNLKEIH@?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAL?$AAC?$AAD?$AA_?$AAV?$AAS?$AAW?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "L"
	DCB	0x0, "C", 0x0, "D", 0x0, "_", 0x0, "V", 0x0, "S", 0x0, "W"
	DCB	0x0, " ", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "o"
	DCB	0x0, "f", 0x0, " ", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "g"
	DCB	0x0, "e", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@EMLMGKHA@?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAL?$AAC?$AAD?$AA_?$AAH?$AAB?$AAP?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "L"
	DCB	0x0, "C", 0x0, "D", 0x0, "_", 0x0, "H", 0x0, "B", 0x0, "P"
	DCB	0x0, " ", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "o"
	DCB	0x0, "f", 0x0, " ", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "g"
	DCB	0x0, "e", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@BHAMJHDL@?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAL?$AAC?$AAD?$AA_?$AAH?$AAF?$AAP?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "L"
	DCB	0x0, "C", 0x0, "D", 0x0, "_", 0x0, "H", 0x0, "F", 0x0, "P"
	DCB	0x0, " ", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "o"
	DCB	0x0, "f", 0x0, " ", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "g"
	DCB	0x0, "e", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@CIDGEHJG@?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAL?$AAC?$AAD?$AA_?$AAH?$AAS?$AAW?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "L"
	DCB	0x0, "C", 0x0, "D", 0x0, "_", 0x0, "H", 0x0, "S", 0x0, "W"
	DCB	0x0, " ", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "o"
	DCB	0x0, "f", 0x0, " ", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "g"
	DCB	0x0, "e", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LcdPdd_LCD_InitResolution| PROC

; 288  : {

  00000		 |$LN18@LcdPdd_LCD|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M46264|

; 289  :     if (g_dwSelectedDSSResolution == OMAP_RES_INVALID)

  00004	e59f411c	 ldr         r4, [pc, #0x11C]
  00008	e5943288	 ldr         r3, [r4, #0x288]
  0000c	e3530008	 cmp         r3, #8
  00010	1a00003b	 bne         |$LN1@LcdPdd_LCD|

; 290  :     {
; 291  :         GetDisplayResolutionFromBootArgs((DWORD *)&g_dwSelectedDSSResolution);

  00014	e2840fa2	 add         r0, r4, #0xA2, 30
  00018	eb000000	 bl          GetDisplayResolutionFromBootArgs

; 292  :         if ((g_dwSelectedDSSResolution >= OMAP_RES_INVALID) || (g_dwSelectedDSSResolution <0))

  0001c	e5942288	 ldr         r2, [r4, #0x288]
  00020	e3520008	 cmp         r2, #8
  00024	aa000001	 bge         |$LN9@LcdPdd_LCD|
  00028	e3520000	 cmp         r2, #0
  0002c	5a000002	 bpl         |$LN14@LcdPdd_LCD|
  00030		 |$LN9@LcdPdd_LCD|

; 293  :             g_dwSelectedDSSResolution = OMAP_LCD_DEFAULT;

  00030	e3a02000	 mov         r2, #0
  00034	e5842288	 str         r2, [r4, #0x288]

; 294  :     
; 295  :         if (g_dwSelectedDSSResolution == OMAP_LCD_DEFAULT)

  00038	e3520000	 cmp         r2, #0
  0003c		 |$LN14@LcdPdd_LCD|

; 296  :             bDVIEnabled = FALSE;

  0003c	e59f30e0	 ldr         r3, [pc, #0xE0]
  00040	03a01000	 moveq       r1, #0

; 297  :         else
; 298  :             bDVIEnabled = TRUE;

  00044	13a01001	 movne       r1, #1
  00048	e5831000	 str         r1, [r3]

; 299  :         
; 300  :         if (LCD_HSW > 63)

  0004c	e0823182	 add         r3, r2, r2, lsl #3
  00050	e0843183	 add         r3, r4, r3, lsl #3
  00054	e593300c	 ldr         r3, [r3, #0xC]
  00058	e353003f	 cmp         r3, #0x3F
  0005c	9a000002	 bls         |$LN6@LcdPdd_LCD|

; 301  :             RETAILMSG(1,(L"error LCD_HSW out of range \r\n"));

  00060	e59f00b8	 ldr         r0, [pc, #0xB8]
  00064	eb000000	 bl          NKDbgPrintfW
  00068	e5942288	 ldr         r2, [r4, #0x288]
  0006c		 |$LN6@LcdPdd_LCD|

; 302  :                     
; 303  :         if (LCD_HFP > 255)

  0006c	e0823182	 add         r3, r2, r2, lsl #3
  00070	e0843183	 add         r3, r4, r3, lsl #3
  00074	e5933010	 ldr         r3, [r3, #0x10]
  00078	e35300ff	 cmp         r3, #0xFF
  0007c	9a000002	 bls         |$LN5@LcdPdd_LCD|

; 304  :             RETAILMSG(1,(L"error LCD_HFP out of range \r\n"));

  00080	e59f0094	 ldr         r0, [pc, #0x94]
  00084	eb000000	 bl          NKDbgPrintfW
  00088	e5942288	 ldr         r2, [r4, #0x288]
  0008c		 |$LN5@LcdPdd_LCD|

; 305  :                     
; 306  :         if (LCD_HBP > 255)

  0008c	e0823182	 add         r3, r2, r2, lsl #3
  00090	e0843183	 add         r3, r4, r3, lsl #3
  00094	e5933014	 ldr         r3, [r3, #0x14]
  00098	e35300ff	 cmp         r3, #0xFF
  0009c	9a000002	 bls         |$LN4@LcdPdd_LCD|

; 307  :             RETAILMSG(1,(L"error LCD_HBP out of range \r\n"));

  000a0	e59f0070	 ldr         r0, [pc, #0x70]
  000a4	eb000000	 bl          NKDbgPrintfW
  000a8	e5942288	 ldr         r2, [r4, #0x288]
  000ac		 |$LN4@LcdPdd_LCD|

; 308  :                     
; 309  :         if (LCD_VSW > 63)

  000ac	e0823182	 add         r3, r2, r2, lsl #3
  000b0	e0843183	 add         r3, r4, r3, lsl #3
  000b4	e5933018	 ldr         r3, [r3, #0x18]
  000b8	e353003f	 cmp         r3, #0x3F
  000bc	9a000002	 bls         |$LN3@LcdPdd_LCD|

; 310  :             RETAILMSG(1,(L"error LCD_VSW out of range \r\n"));

  000c0	e59f004c	 ldr         r0, [pc, #0x4C]
  000c4	eb000000	 bl          NKDbgPrintfW
  000c8	e5942288	 ldr         r2, [r4, #0x288]
  000cc		 |$LN3@LcdPdd_LCD|

; 311  :                     
; 312  :         if (LCD_VFP > 255)

  000cc	e0823182	 add         r3, r2, r2, lsl #3
  000d0	e0843183	 add         r3, r4, r3, lsl #3
  000d4	e593301c	 ldr         r3, [r3, #0x1C]
  000d8	e35300ff	 cmp         r3, #0xFF
  000dc	9a000002	 bls         |$LN2@LcdPdd_LCD|

; 313  :             RETAILMSG(1,(L"error LCD_VFP out of range \r\n"));

  000e0	e59f0028	 ldr         r0, [pc, #0x28]
  000e4	eb000000	 bl          NKDbgPrintfW
  000e8	e5942288	 ldr         r2, [r4, #0x288]
  000ec		 |$LN2@LcdPdd_LCD|

; 314  :                     
; 315  :         if (LCD_VBP > 255)

  000ec	e0823182	 add         r3, r2, r2, lsl #3
  000f0	e0843183	 add         r3, r4, r3, lsl #3
  000f4	e5933020	 ldr         r3, [r3, #0x20]
  000f8	e35300ff	 cmp         r3, #0xFF

; 316  :             RETAILMSG(1,(L"error LCD_VBP out of range \r\n"));

  000fc	859f0008	 ldrhi       r0, [pc, #8]
  00100	8b000000	 blhi        NKDbgPrintfW
  00104		 |$LN1@LcdPdd_LCD|

; 317  :     }
; 318  :         
; 319  : }

  00104	e8bd4010	 ldmia       sp!, {r4, lr}
  00108	e12fff1e	 bx          lr
  0010c		 |$LN19@LcdPdd_LCD|
  0010c		 |$LN20@LcdPdd_LCD|
  0010c	00000000	 DCD         |??_C@_1DM@JHFBIJGB@?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAL?$AAC?$AAD?$AA_?$AAV?$AAB?$AAP?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  00110		 |$LN21@LcdPdd_LCD|
  00110	00000000	 DCD         |??_C@_1DM@MMOBHECK@?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAL?$AAC?$AAD?$AA_?$AAV?$AAF?$AAP?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  00114		 |$LN22@LcdPdd_LCD|
  00114	00000000	 DCD         |??_C@_1DM@PDNLKEIH@?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAL?$AAC?$AAD?$AA_?$AAV?$AAS?$AAW?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  00118		 |$LN23@LcdPdd_LCD|
  00118	00000000	 DCD         |??_C@_1DM@EMLMGKHA@?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAL?$AAC?$AAD?$AA_?$AAH?$AAB?$AAP?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  0011c		 |$LN24@LcdPdd_LCD|
  0011c	00000000	 DCD         |??_C@_1DM@BHAMJHDL@?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAL?$AAC?$AAD?$AA_?$AAH?$AAF?$AAP?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  00120		 |$LN25@LcdPdd_LCD|
  00120	00000000	 DCD         |??_C@_1DM@CIDGEHJG@?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAL?$AAC?$AAD?$AA_?$AAH?$AAS?$AAW?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  00124		 |$LN26@LcdPdd_LCD|
  00124	00000000	 DCD         |bDVIEnabled|
  00128		 |$LN27@LcdPdd_LCD|
  00128	00000000	 DCD         |lcd_res_params|
  0012c		 |$M46265|

			 ENDP  ; |LcdPdd_LCD_InitResolution|

	EXPORT	|LcdPdd_TV_Initialize|

  00000			 AREA	 |.pdata|, PDATA
|$T46287| DCD	|$LN5@LcdPdd_TV_|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LcdPdd_TV_Initialize| PROC

; 440  : {

  00000		 |$LN5@LcdPdd_TV_|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M46284|

; 441  : 	UNREFERENCED_PARAMETER(pVencRegs);
; 442  : 	UNREFERENCED_PARAMETER(pRfbiRegs);
; 443  : 
; 444  :     //  Enable TV out DSS control settings
; 445  :     
; 446  : #if BSP_TVOUT_COMPOSITE 
; 447  :     SETREG32( &pDSSRegs->DSS_CONTROL,
; 448  :                 DSS_CONTROL_DAC_POWERDN_BGZ |
; 449  :                 DSS_CONTROL_DAC_DEMEN |
; 450  :                 DSS_CONTROL_VENC_CLOCK_4X_ENABLE |
; 451  :                 DSS_CONTROL_VENC_CLOCK_MODE_0
; 452  :                 );
; 453  :     CLRREG32( &pDSSRegs->DSS_CONTROL,
; 454  :                 DSS_CONTROL_DAC_VENC_OUT_SEL            //Enable Composite TVout
; 455  :             );
; 456  : #else
; 457  :     SETREG32( &pDSSRegs->DSS_CONTROL,
; 458  :                 DSS_CONTROL_DAC_VENC_OUT_SEL |          // Enables S-video
; 459  :                 DSS_CONTROL_DAC_POWERDN_BGZ |
; 460  :                 DSS_CONTROL_DAC_DEMEN |
; 461  :                 DSS_CONTROL_VENC_CLOCK_4X_ENABLE |
; 462  :                 DSS_CONTROL_VENC_CLOCK_MODE_0
; 463  :                 );

  00004	e5903040	 ldr         r3, [r0, #0x40]

; 464  : #endif              
; 465  : 
; 466  : 
; 467  :     // Default Color
; 468  :     OUTREG32( &pDispRegs->DISPC_DEFAULT_COLOR1,
; 469  :                 TV_DEFAULT_COLOR
; 470  :                 );

  00008	e59fe044	 ldr         lr, [pc, #0x44]

; 471  : 
; 472  :     // Default Transparency Color
; 473  :     OUTREG32( &pDispRegs->DISPC_TRANS_COLOR1,
; 474  :                 TV_TRANS_COLOR
; 475  :                 );
; 476  : 
; 477  : 
; 478  : #if BSP_TVOUT_PAL
; 479  :     // Configures the TV size for PAL interlaced (half height)
; 480  :     // the LPP is programmed to (PAL_HEIGHT+2)/2 for interlaced mode
; 481  :     OUTREG32(   &pDispRegs->DISPC_SIZE_DIG,
; 482  :                 DISPC_SIZE_DIG_LPP((PAL_HEIGHT+2)/2) |
; 483  :                 DISPC_SIZE_DIG_PPL(PAL_WIDTH)
; 484  :                 );
; 485  : #else
; 486  :     // Configures the TV size for NTSC interlaced (half height)
; 487  :     // the LPP is programmed to (NTSC_HEIGHT+2)/2 for interlaced mode
; 488  :     OUTREG32( &pDispRegs->DISPC_SIZE_DIG,
; 489  :                 DISPC_SIZE_DIG_LPP((NTSC_HEIGHT+2)/2) |
; 490  :                 DISPC_SIZE_DIG_PPL(NTSC_WIDTH)
; 491  :                 );

  0000c	e59f203c	 ldr         r2, [pc, #0x3C]
  00010	e3833078	 orr         r3, r3, #0x78
  00014	e5803040	 str         r3, [r0, #0x40]
  00018	e59e3288	 ldr         r3, [lr, #0x288]

; 492  : #endif
; 493  : 
; 494  :     return TRUE;

  0001c	e3a00001	 mov         r0, #1
  00020	e0833183	 add         r3, r3, r3, lsl #3
  00024	e08e3183	 add         r3, lr, r3, lsl #3
  00028	e5933040	 ldr         r3, [r3, #0x40]
  0002c	e5813050	 str         r3, [r1, #0x50]
  00030	e59e3288	 ldr         r3, [lr, #0x288]
  00034	e0833183	 add         r3, r3, r3, lsl #3
  00038	e08e3183	 add         r3, lr, r3, lsl #3
  0003c	e5933044	 ldr         r3, [r3, #0x44]
  00040	e5813058	 str         r3, [r1, #0x58]
  00044	e5812078	 str         r2, [r1, #0x78]

; 495  : }

  00048	e49de004	 ldr         lr, [sp], #4
  0004c	e12fff1e	 bx          lr
  00050		 |$LN6@LcdPdd_TV_|
  00050		 |$LN7@LcdPdd_TV_|
  00050	00f002cf	 DCD         0xf002cf
  00054		 |$LN8@LcdPdd_TV_|
  00054	00000000	 DCD         |lcd_res_params|
  00058		 |$M46285|

			 ENDP  ; |LcdPdd_TV_Initialize|

	EXPORT	|LcdPdd_GetMemory|
	IMPORT	|ConvertCAtoPA|

  00000			 AREA	 |.pdata|, PDATA
|$T46301| DCD	|$LN7@LcdPdd_Get|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LcdPdd_GetMemory| PROC

; 504  : {

  00000		 |$LN7@LcdPdd_Get|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M46298|
  00004	e1a04001	 mov         r4, r1
  00008	e3500000	 cmp         r0, #0

; 505  :     //  Return video memory parameters
; 506  :     if( pVideoMemLen )
; 507  :         *pVideoMemLen = IMAGE_WINCE_DISPLAY_SIZE;

  0000c	13a0361a	 movne       r3, #0x1A, 12
  00010	15803000	 strne       r3, [r0]

; 508  : 
; 509  :     if( pVideoMemAddr )

  00014	e3540000	 cmp         r4, #0
  00018	0a000002	 beq         |$LN1@LcdPdd_Get|

; 510  :     {
; 511  :         DWORD videoCAAddr = IMAGE_WINCE_DISPLAY_CA;
; 512  :         *pVideoMemAddr = ConvertCAtoPA((DWORD *)videoCAAddr);

  0001c	e3a00322	 mov         r0, #0x22, 6
  00020	eb000000	 bl          ConvertCAtoPA
  00024	e5840000	 str         r0, [r4]
  00028		 |$LN1@LcdPdd_Get|

; 513  :     }
; 514  : 
; 515  :     return TRUE;

  00028	e3a00001	 mov         r0, #1

; 516  : }

  0002c	e8bd4010	 ldmia       sp!, {r4, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M46299|

			 ENDP  ; |LcdPdd_GetMemory|

	EXPORT	|LcdPdd_LCD_GetMode|
	IMPORT	|__rt_udiv|

  00000			 AREA	 |.pdata|, PDATA
|$T46315| DCD	|$LN9@LcdPdd_LCD@2|
	DCD	0x40002901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LcdPdd_LCD_GetMode| PROC

; 526  : {

  00000		 |$LN9@LcdPdd_LCD@2|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M46312|
  00004	e1a08003	 mov         r8, r3
  00008	e1a05002	 mov         r5, r2
  0000c	e1a06001	 mov         r6, r1
  00010	e1a07000	 mov         r7, r0

; 527  : 
; 528  :     LcdPdd_LCD_InitResolution();        

  00014	eb000000	 bl          LcdPdd_LCD_InitResolution

; 529  :     
; 530  :     //  Return default LCD parameters
; 531  :     if( pPixelFormat )

  00018	e59f4080	 ldr         r4, [pc, #0x80]
  0001c	e3570000	 cmp         r7, #0

; 532  :         *pPixelFormat = DEFAULT_PIXELTYPE;

  00020	1594e288	 ldrne       lr, [r4, #0x288]
  00024	108ee18e	 addne       lr, lr, lr, lsl #3
  00028	1794e18e	 ldrne       lr, [r4, +lr, lsl #3]
  0002c	1587e000	 strne       lr, [r7]

; 533  : 
; 534  :     if( pWidth )

  00030	e3560000	 cmp         r6, #0

; 535  :         *pWidth = LCD_WIDTH;

  00034	15940288	 ldrne       r0, [r4, #0x288]
  00038	10800180	 addne       r0, r0, r0, lsl #3
  0003c	10840180	 addne       r0, r4, r0, lsl #3
  00040	15900004	 ldrne       r0, [r0, #4]
  00044	15860000	 strne       r0, [r6]

; 536  : 
; 537  :     if( pHeight )

  00048	e3550000	 cmp         r5, #0

; 538  :         *pHeight = LCD_HEIGHT;

  0004c	15943288	 ldrne       r3, [r4, #0x288]
  00050	10833183	 addne       r3, r3, r3, lsl #3
  00054	10843183	 addne       r3, r4, r3, lsl #3
  00058	15933008	 ldrne       r3, [r3, #8]
  0005c	15853000	 strne       r3, [r5]

; 539  : 
; 540  :     if ( pPixelClock )

  00060	e3580000	 cmp         r8, #0
  00064	0a00000a	 beq         |$LN1@LcdPdd_LCD@2|

; 541  :         *pPixelClock = (864000000 / BSP_DSS_CLKSEL_DSS1) / BSP_LCD_PIXCLKDIV;

  00068	e5943288	 ldr         r3, [r4, #0x288]
  0006c	e3a025ce	 mov         r2, #0xCE, 10
  00070	e2421b1a	 sub         r1, r2, #0x1A, 22
  00074	e0833183	 add         r3, r3, r3, lsl #3
  00078	e0844183	 add         r4, r4, r3, lsl #3
  0007c	e594002c	 ldr         r0, [r4, #0x2C]
  00080	eb000000	 bl          __rt_udiv
  00084	e1a01000	 mov         r1, r0
  00088	e5940028	 ldr         r0, [r4, #0x28]
  0008c	eb000000	 bl          __rt_udiv
  00090	e5880000	 str         r0, [r8]
  00094		 |$LN1@LcdPdd_LCD@2|

; 542  : 
; 543  :     return TRUE;

  00094	e3a00001	 mov         r0, #1

; 544  : }

  00098	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  0009c	e12fff1e	 bx          lr
  000a0		 |$LN10@LcdPdd_LCD@2|
  000a0		 |$LN11@LcdPdd_LCD@2|
  000a0	00000000	 DCD         |lcd_res_params|
  000a4		 |$M46313|

			 ENDP  ; |LcdPdd_LCD_GetMode|

	EXPORT	|LcdPdd_TV_GetMode|

  00000			 AREA	 |.pdata|, PDATA
|$T46329| DCD	|$LN8@LcdPdd_TV_@2|
	DCD	0x40000b00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LcdPdd_TV_GetMode| PROC

; 553  : {

  00000		 |$LN8@LcdPdd_TV_@2|
  00000		 |$M46326|
  00000	e3500000	 cmp         r0, #0

; 554  :     //  Return default TV parameters
; 555  :     if( pWidth )
; 556  :         #if BSP_TVOUT_PAL
; 557  :             *pWidth = PAL_WIDTH;
; 558  :         #else
; 559  :             *pWidth = NTSC_WIDTH;

  00004	13a03e2d	 movne       r3, #0x2D, 28
  00008	15803000	 strne       r3, [r0]

; 560  :         #endif
; 561  :             
; 562  :     if( pHeight )

  0000c	e3510000	 cmp         r1, #0

; 563  :         #if BSP_TVOUT_PAL
; 564  :             *pHeight = PAL_HEIGHT;
; 565  :         #else
; 566  :             *pHeight = NTSC_HEIGHT;

  00010	13a03e1e	 movne       r3, #0x1E, 28
  00014	15813000	 strne       r3, [r1]

; 567  :         #endif
; 568  : 
; 569  :     if( pMode )

  00018	e3520000	 cmp         r2, #0

; 570  :     {
; 571  :         #if BSP_TVOUT_COMPOSITE
; 572  :             *pMode = TVOUT_COMPOSITE;
; 573  :         #else
; 574  :             *pMode = TVOUT_SVIDEO;

  0001c	13a0300d	 movne       r3, #0xD
  00020	15823000	 strne       r3, [r2]

; 575  :         #endif
; 576  :     }
; 577  :         
; 578  :     return TRUE;

  00024	e3a00001	 mov         r0, #1

; 579  : }

  00028	e12fff1e	 bx          lr
  0002c		 |$M46327|

			 ENDP  ; |LcdPdd_TV_GetMode|

	EXPORT	|LcdPdd_SetPowerLevel|
	IMPORT	|LcdStall|
	IMPORT	|LcdPowerControl|
	IMPORT	|LcdResBControl|
	IMPORT	|LcdSleep|
	IMPORT	|LcdIniControl|
	IMPORT	|LcdDviEnableControl|

  00004			 AREA	 |.bss|, NOINIT
|g_pDispRegs| %	0x4
|g_pDispRegs| %	0x4

  00000			 AREA	 |.pdata|, PDATA
|$T46341| DCD	|$LN18@LcdPdd_Set|
	DCD	0x40004701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LcdPdd_SetPowerLevel| PROC

; 587  : {

  00000		 |$LN18@LcdPdd_Set|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M46338|
  00004	e1a04000	 mov         r4, r0

; 588  :     // Do nothing if LCD has not yet been initialized
; 589  :     if (g_pDispRegs == NULL)

  00008	e59f5108	 ldr         r5, [pc, #0x108]
  0000c	e5952000	 ldr         r2, [r5]
  00010	e3520000	 cmp         r2, #0

; 590  :         return FALSE;

  00014	03a00000	 moveq       r0, #0

; 679  : }   

  00018	08bd4030	 ldmeqia     sp!, {r4, r5, lr}
  0001c	012fff1e	 bxeq        lr

; 591  :         
; 592  :     // Power display up/down
; 593  :     switch(dwPowerLevel)

  00020	e3540002	 cmp         r4, #2
  00024	9a000010	 bls         |$LN8@LcdPdd_Set|
  00028	e3540004	 cmp         r4, #4
  0002c	8a000036	 bhi         |$LN4@LcdPdd_Set|

; 656  :             }
; 657  :             break;        
; 658  : 
; 659  :         case D3:
; 660  :         case D4:
; 661  :             // disable DVI
; 662  :             LcdDviEnableControl(FALSE);

  00030	e3a00000	 mov         r0, #0
  00034	eb000000	 bl          LcdDviEnableControl

; 663  : 
; 664  :             // LCD power disable sequence
; 665  :             // 1 - Clear INI
; 666  :             LcdIniControl(FALSE);

  00038	e3a00000	 mov         r0, #0
  0003c	eb000000	 bl          LcdIniControl

; 667  :                 
; 668  :             // 2 - Delay > 5 frames
; 669  :             LcdSleep(20*5);

  00040	e3a00064	 mov         r0, #0x64
  00044	eb000000	 bl          LcdSleep

; 670  :             
; 671  :             // 3 - Stop all
; 672  :             CLRREG32( &g_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_LCDENABLE );        

  00048	e5952000	 ldr         r2, [r5]

; 673  :             LcdResBControl(FALSE);

  0004c	e3a00000	 mov         r0, #0
  00050	e5923040	 ldr         r3, [r2, #0x40]
  00054	e3c33001	 bic         r3, r3, #1
  00058	e5823040	 str         r3, [r2, #0x40]
  0005c	eb000000	 bl          LcdResBControl

; 674  :             LcdPowerControl(FALSE);

  00060	e3a00000	 mov         r0, #0
  00064	eb000000	 bl          LcdPowerControl

; 675  :             break;

  00068	ea000027	 b           |$LN4@LcdPdd_Set|
  0006c		 |$LN8@LcdPdd_Set|

; 594  :     {
; 595  :         case D0:
; 596  :         case D1:
; 597  :         case D2:
; 598  :             
; 599  :             if (bDVIEnabled)

  0006c	e5953004	 ldr         r3, [r5, #4]
  00070	e3530000	 cmp         r3, #0
  00074	e3a03906	 mov         r3, #6, 18
  00078	0a00000e	 beq         |$LN7@LcdPdd_Set|

; 600  :             {
; 601  :                 // change output format to 24 bit
; 602  :                 OUTREG32( &g_pDispRegs->DISPC_CONTROL,
; 603  :                         DISPC_CONTROL_GPOUT1 |
; 604  :                         DISPC_CONTROL_GPOUT0 |
; 605  :                         DISPC_CONTROL_TFTDATALINES_24 |
; 606  :                         DISPC_CONTROL_STNTFT
; 607  :                         );

  0007c	e3833fc2	 orr         r3, r3, #0xC2, 30
  00080	e5823040	 str         r3, [r2, #0x40]

; 608  : 
; 609  :                 // Apply display configuration
; 610  :                 SETREG32(&g_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_GOLCD);

  00084	e5923040	 ldr         r3, [r2, #0x40]

; 611  : 
; 612  :                 // start scanning
; 613  :                 
; 614  :                 if (dwPowerLevel == D2)

  00088	e3540002	 cmp         r4, #2

; 615  :                     CLRREG32( &g_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_LCDENABLE );        
; 616  :                 else
; 617  :                     SETREG32( &g_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_LCDENABLE );        
; 618  :                 LcdSleep(20);

  0008c	e3a00014	 mov         r0, #0x14
  00090	e3833020	 orr         r3, r3, #0x20
  00094	e5823040	 str         r3, [r2, #0x40]
  00098	e5923040	 ldr         r3, [r2, #0x40]
  0009c	03c33001	 biceq       r3, r3, #1
  000a0	13833001	 orrne       r3, r3, #1
  000a4	e5823040	 str         r3, [r2, #0x40]
  000a8	eb000000	 bl          LcdSleep

; 619  :                 // enable DVI
; 620  :                 LcdDviEnableControl(TRUE);

  000ac	e3a00001	 mov         r0, #1
  000b0	eb000000	 bl          LcdDviEnableControl

; 621  :             }
; 622  :             else

  000b4	ea000014	 b           |$LN4@LcdPdd_Set|
  000b8		 |$LN7@LcdPdd_Set|

; 623  :             {
; 624  :                 // change output format to 18 bit
; 625  :                 OUTREG32( &g_pDispRegs->DISPC_CONTROL,
; 626  :                         DISPC_CONTROL_GPOUT1 |
; 627  :                         DISPC_CONTROL_GPOUT0 |
; 628  :                         DISPC_CONTROL_TFTDATALINES_18 |
; 629  :                         DISPC_CONTROL_STNTFT
; 630  :                         );

  000b8	e3833f82	 orr         r3, r3, #0x82, 30
  000bc	e5823040	 str         r3, [r2, #0x40]

; 631  : 
; 632  :                 // Apply display configuration
; 633  :                 SETREG32(&g_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_GOLCD);

  000c0	e5923040	 ldr         r3, [r2, #0x40]

; 634  : 
; 635  :                 // LCD power enable sequence
; 636  :                 // 1 - Turn on power
; 637  :                 LcdPowerControl(TRUE);

  000c4	e3a00001	 mov         r0, #1
  000c8	e3833020	 orr         r3, r3, #0x20
  000cc	e5823040	 str         r3, [r2, #0x40]
  000d0	eb000000	 bl          LcdPowerControl

; 638  :                         
; 639  :                 // 2 - Start scanning
; 640  :                 if (dwPowerLevel == D2)
; 641  :                     CLRREG32( &g_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_LCDENABLE );        

  000d4	e5952000	 ldr         r2, [r5]
  000d8	e3540002	 cmp         r4, #2

; 642  :                 else
; 643  :                     SETREG32( &g_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_LCDENABLE );        
; 644  :     
; 645  :             
; 646  :                 // 3 - Delay for minimum 20uS
; 647  :                 LcdStall(50);

  000dc	e3a00032	 mov         r0, #0x32
  000e0	e5923040	 ldr         r3, [r2, #0x40]
  000e4	03c33001	 biceq       r3, r3, #1
  000e8	13833001	 orrne       r3, r3, #1
  000ec	e5823040	 str         r3, [r2, #0x40]
  000f0	eb000000	 bl          LcdStall

; 648  :             
; 649  :                 // 4 - Raise RESB
; 650  :                 LcdResBControl(TRUE);

  000f4	e3a00001	 mov         r0, #1
  000f8	eb000000	 bl          LcdResBControl

; 651  :             
; 652  :                 LcdStall(10);

  000fc	e3a0000a	 mov         r0, #0xA
  00100	eb000000	 bl          LcdStall

; 653  :             
; 654  :                 // 5 - Raise INI
; 655  :                 LcdIniControl(TRUE);

  00104	e3a00001	 mov         r0, #1
  00108	eb000000	 bl          LcdIniControl
  0010c		 |$LN4@LcdPdd_Set|

; 676  :     }
; 677  :         
; 678  :     return TRUE;

  0010c	e3a00001	 mov         r0, #1

; 679  : }   

  00110	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00114	e12fff1e	 bx          lr
  00118		 |$LN19@LcdPdd_Set|
  00118		 |$LN20@LcdPdd_Set|
  00118	00000000	 DCD         |g_pDispRegs|
  0011c		 |$M46339|

			 ENDP  ; |LcdPdd_SetPowerLevel|

	EXPORT	|LcdPdd_DVI_Select|

  00000			 AREA	 |.pdata|, PDATA
|$T46353| DCD	|$LN5@LcdPdd_DVI|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LcdPdd_DVI_Select| PROC

; 686  : {

  00000		 |$LN5@LcdPdd_DVI|
  00000		 |$M46350|
  00000	e1a02000	 mov         r2, r0

; 687  : 
; 688  :     // only changes the select variable, does not perform the change
; 689  :     bDVIEnabled = bEnable;

  00004	e59f3008	 ldr         r3, [pc, #8]

; 690  :     return TRUE;

  00008	e3a00001	 mov         r0, #1
  0000c	e5832000	 str         r2, [r3]

; 691  : }

  00010	e12fff1e	 bx          lr
  00014		 |$LN6@LcdPdd_DVI|
  00014		 |$LN7@LcdPdd_DVI|
  00014	00000000	 DCD         |bDVIEnabled|
  00018		 |$M46351|

			 ENDP  ; |LcdPdd_DVI_Select|

	EXPORT	|LcdPdd_DVI_Enabled|

  00000			 AREA	 |.pdata|, PDATA
|$T46364| DCD	|$LN5@LcdPdd_DVI@2|
	DCD	0x40000701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LcdPdd_DVI_Enabled| PROC

; 696  : {

  00000		 |$LN5@LcdPdd_DVI@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M46361|

; 697  :     LcdPdd_LCD_InitResolution();

  00004	eb000000	 bl          LcdPdd_LCD_InitResolution

; 698  :     return bDVIEnabled;

  00008	e59f3008	 ldr         r3, [pc, #8]
  0000c	e5930000	 ldr         r0, [r3]

; 699  : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$LN6@LcdPdd_DVI@2|
  00018		 |$LN7@LcdPdd_DVI@2|
  00018	00000000	 DCD         |bDVIEnabled|
  0001c		 |$M46362|

			 ENDP  ; |LcdPdd_DVI_Enabled|

	EXPORT	|LcdPdd_Get_PixClkDiv|

  00000			 AREA	 |.pdata|, PDATA
|$T46375| DCD	|$LN5@LcdPdd_Get@2|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LcdPdd_Get_PixClkDiv| PROC

; 704  : {

  00000		 |$LN5@LcdPdd_Get@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M46372|

; 705  :     LcdPdd_LCD_InitResolution();

  00004	eb000000	 bl          LcdPdd_LCD_InitResolution

; 706  :     return LCD_PIXCLKDIV;

  00008	e59f3014	 ldr         r3, [pc, #0x14]
  0000c	e5931288	 ldr         r1, [r3, #0x288]
  00010	e2832028	 add         r2, r3, #0x28
  00014	e0813181	 add         r3, r1, r1, lsl #3
  00018	e7920183	 ldr         r0, [r2, +r3, lsl #3]

; 707  : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$LN6@LcdPdd_Get@2|
  00024		 |$LN7@LcdPdd_Get@2|
  00024	00000000	 DCD         |lcd_res_params|
  00028		 |$M46373|

			 ENDP  ; |LcdPdd_Get_PixClkDiv|

	EXPORT	|LcdPdd_LCD_Initialize|
	IMPORT	|MmUnmapIoSpace|
	IMPORT	|LcdInitGpio|
	IMPORT	|MmMapIoSpace|

  00000			 AREA	 |.pdata|, PDATA
|$T46391| DCD	|$LN9@LcdPdd_LCD@3|
	DCD	0x40006501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LcdPdd_LCD_Initialize| PROC

; 329  : {

  00000		 |$LN9@LcdPdd_LCD@3|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M46388|
  00004	e1a06001	 mov         r6, r1

; 330  :     PHYSICAL_ADDRESS pa;
; 331  :     OMAP_PRCM_DSS_CM_REGS *pPrcmDssCM;
; 332  : 
; 333  : 	UNREFERENCED_PARAMETER(pVencRegs);
; 334  : 	UNREFERENCED_PARAMETER(pRfbiRegs);
; 335  : 	UNREFERENCED_PARAMETER(pDSSRegs);
; 336  : 
; 337  :     LcdPdd_LCD_InitResolution();

  00008	eb000000	 bl          LcdPdd_LCD_InitResolution
  0000c	e3a03312	 mov         r3, #0x12, 6

; 338  :     
; 339  : 
; 340  :     pa.QuadPart = OMAP_PRCM_DSS_CM_REGS_PA;    

  00010	e3830c4e	 orr         r0, r3, #0x4E, 24

; 341  :     pPrcmDssCM = (OMAP_PRCM_DSS_CM_REGS*)MmMapIoSpace(pa, sizeof(OMAP_PRCM_DSS_CM_REGS), FALSE);

  00014	e3a03000	 mov         r3, #0
  00018	e3a01000	 mov         r1, #0
  0001c	e3a02050	 mov         r2, #0x50
  00020	eb000000	 bl          MmMapIoSpace
  00024	e1b05000	 movs        r5, r0

; 342  :     if (pPrcmDssCM == NULL) return FALSE;

  00028	03a00000	 moveq       r0, #0

; 430  : }

  0002c	08bd40f0	 ldmeqia     sp!, {r4 - r7, lr}
  00030	012fff1e	 bxeq        lr

; 343  : 
; 344  :     // Store pointer to display controller for future use
; 345  :     g_pDispRegs = pDispRegs;

  00034	e59f4154	 ldr         r4, [pc, #0x154]
  00038	e5846000	 str         r6, [r4]

; 346  :     
; 347  :     // Initialize GPIO
; 348  :     LcdInitGpio();

  0003c	eb000000	 bl          LcdInitGpio

; 349  :     
; 350  :     // setup the DSS1 clock divider - disable DSS1 clock, change divider, enable DSS clock
; 351  :     OUTREG32(&pPrcmDssCM->CM_FCLKEN_DSS, INREG32(&pPrcmDssCM->CM_FCLKEN_DSS) & ~CM_CLKEN_DSS1);

  00040	e5953000	 ldr         r3, [r5]

; 352  :     OUTREG32(&pPrcmDssCM->CM_CLKSEL_DSS, BSP_CM_CLKSEL_DSS);

  00044	e59f7140	 ldr         r7, [pc, #0x140]
  00048	e3c33001	 bic         r3, r3, #1
  0004c	e5853000	 str         r3, [r5]
  00050	e5973288	 ldr         r3, [r7, #0x288]

; 353  :     OUTREG32(&pPrcmDssCM->CM_FCLKEN_DSS, INREG32(&pPrcmDssCM->CM_FCLKEN_DSS) | CM_CLKEN_DSS1);
; 354  :     
; 355  :     //  LCD control
; 356  :     if (bDVIEnabled)

  00054	e5942004	 ldr         r2, [r4, #4]
  00058	e0833183	 add         r3, r3, r3, lsl #3
  0005c	e0873183	 add         r3, r7, r3, lsl #3
  00060	e593302c	 ldr         r3, [r3, #0x2C]
  00064	e3520000	 cmp         r2, #0
  00068	e3833a01	 orr         r3, r3, #1, 20
  0006c	e5853040	 str         r3, [r5, #0x40]
  00070	e5953000	 ldr         r3, [r5]
  00074	e3833001	 orr         r3, r3, #1
  00078	e5853000	 str         r3, [r5]
  0007c	e3a03906	 mov         r3, #6, 18

; 357  :     {
; 358  :         OUTREG32( &pDispRegs->DISPC_CONTROL,
; 359  :                 DISPC_CONTROL_GPOUT1 |
; 360  :                 DISPC_CONTROL_GPOUT0 |
; 361  :                 DISPC_CONTROL_TFTDATALINES_24 |
; 362  :                 DISPC_CONTROL_STNTFT
; 363  :                 );

  00080	13833fc2	 orrne       r3, r3, #0xC2, 30

; 364  :     }
; 365  :     else
; 366  :     {
; 367  :         OUTREG32( &pDispRegs->DISPC_CONTROL,
; 368  :                 DISPC_CONTROL_GPOUT1 |
; 369  :                 DISPC_CONTROL_GPOUT0 |
; 370  :                 DISPC_CONTROL_TFTDATALINES_18 |
; 371  :                 DISPC_CONTROL_STNTFT
; 372  :                 );

  00084	03833f82	 orreq       r3, r3, #0x82, 30
  00088	e5863040	 str         r3, [r6, #0x40]

; 373  :     }
; 374  :                 
; 375  :     //  LCD config
; 376  :     OUTREG32( &pDispRegs->DISPC_CONFIG,
; 377  :                 DISPC_CONFIG_FUNCGATED |
; 378  :                 DISPC_CONFIG_LOADMODE(LCD_LOADMODE) |
; 379  :                 DISPC_CONFIG_PALETTEGAMMATABLE
; 380  :                 );

  0008c	e5973288	 ldr         r3, [r7, #0x288]

; 381  : 
; 382  :     // Default Color
; 383  :     OUTREG32( &pDispRegs->DISPC_DEFAULT_COLOR0,
; 384  :                 LCD_DEFAULT_COLOR
; 385  :                 );

  00090	e0833183	 add         r3, r3, r3, lsl #3
  00094	e0873183	 add         r3, r7, r3, lsl #3
  00098	e5933030	 ldr         r3, [r3, #0x30]

; 386  : 
; 387  :     // Default Transparency Color
; 388  :     OUTREG32( &pDispRegs->DISPC_TRANS_COLOR0,
; 389  :                 LCD_TRANS_COLOR
; 390  :                 );
; 391  : 
; 392  :     // Timing logic for HSYNC signal
; 393  :     OUTREG32( &pDispRegs->DISPC_TIMING_H,
; 394  :                 DISPC_TIMING_H_HSW(LCD_HSW) |
; 395  :                 DISPC_TIMING_H_HFP(LCD_HFP) |
; 396  :                 DISPC_TIMING_H_HBP(LCD_HBP)
; 397  :                 );

  0009c	e3833f41	 orr         r3, r3, #0x41, 30
  000a0	e1a03083	 mov         r3, r3, lsl #1
  000a4	e5863044	 str         r3, [r6, #0x44]
  000a8	e5973288	 ldr         r3, [r7, #0x288]

; 398  : 
; 399  :     // Timing logic for VSYNC signal
; 400  :     OUTREG32( &pDispRegs->DISPC_TIMING_V,
; 401  :                 DISPC_TIMING_V_VSW(LCD_VSW) |
; 402  :                 DISPC_TIMING_V_VFP(LCD_VFP) |
; 403  :                 DISPC_TIMING_V_VBP(LCD_VBP)
; 404  :                 );
; 405  : 
; 406  :     // Signal configuration
; 407  :     OUTREG32( &pDispRegs->DISPC_POL_FREQ,
; 408  :                 LCD_POLFREQ
; 409  :                 );

  000ac	e0833183	 add         r3, r3, r3, lsl #3
  000b0	e0873183	 add         r3, r7, r3, lsl #3
  000b4	e5933038	 ldr         r3, [r3, #0x38]

; 410  : 
; 411  :     // Configures the divisor
; 412  :     OUTREG32( &pDispRegs->DISPC_DIVISOR,
; 413  :                 DISPC_DIVISOR_PCD(LCD_PIXCLKDIV) |
; 414  :                 DISPC_DIVISOR_LCD(LCD_LOGCLKDIV)
; 415  :                 );
; 416  : 
; 417  :     // Configures the panel size
; 418  :     OUTREG32( &pDispRegs->DISPC_SIZE_LCD,
; 419  :                 DISPC_SIZE_LCD_LPP(LCD_HEIGHT) |
; 420  :                 DISPC_SIZE_LCD_PPL(LCD_WIDTH)
; 421  :                 );

  000b8	e586304c	 str         r3, [r6, #0x4C]
  000bc	e5973288	 ldr         r3, [r7, #0x288]

; 422  : 
; 423  :     MmUnmapIoSpace((VOID*)pPrcmDssCM, sizeof(OMAP_PRCM_DSS_CM_REGS));

  000c0	e3a01050	 mov         r1, #0x50
  000c4	e1a00005	 mov         r0, r5
  000c8	e0833183	 add         r3, r3, r3, lsl #3
  000cc	e0873183	 add         r3, r7, r3, lsl #3
  000d0	e593303c	 ldr         r3, [r3, #0x3C]
  000d4	e5863054	 str         r3, [r6, #0x54]
  000d8	e5973288	 ldr         r3, [r7, #0x288]
  000dc	e0833183	 add         r3, r3, r3, lsl #3
  000e0	e0872183	 add         r2, r7, r3, lsl #3
  000e4	e592e014	 ldr         lr, [r2, #0x14]
  000e8	e5923010	 ldr         r3, [r2, #0x10]
  000ec	e592200c	 ldr         r2, [r2, #0xC]
  000f0	e183360e	 orr         r3, r3, lr, lsl #12
  000f4	e1823403	 orr         r3, r2, r3, lsl #8
  000f8	e5863064	 str         r3, [r6, #0x64]
  000fc	e5973288	 ldr         r3, [r7, #0x288]
  00100	e0833183	 add         r3, r3, r3, lsl #3
  00104	e0872183	 add         r2, r7, r3, lsl #3
  00108	e592e020	 ldr         lr, [r2, #0x20]
  0010c	e592301c	 ldr         r3, [r2, #0x1C]
  00110	e5922018	 ldr         r2, [r2, #0x18]
  00114	e183360e	 orr         r3, r3, lr, lsl #12
  00118	e1823403	 orr         r3, r2, r3, lsl #8
  0011c	e5863068	 str         r3, [r6, #0x68]
  00120	e5973288	 ldr         r3, [r7, #0x288]
  00124	e0833183	 add         r3, r3, r3, lsl #3
  00128	e0873183	 add         r3, r7, r3, lsl #3
  0012c	e5933034	 ldr         r3, [r3, #0x34]
  00130	e586306c	 str         r3, [r6, #0x6C]
  00134	e5973288	 ldr         r3, [r7, #0x288]
  00138	e0833183	 add         r3, r3, r3, lsl #3
  0013c	e0873183	 add         r3, r7, r3, lsl #3
  00140	e5932024	 ldr         r2, [r3, #0x24]
  00144	e5933028	 ldr         r3, [r3, #0x28]
  00148	e1833802	 orr         r3, r3, r2, lsl #16
  0014c	e5863070	 str         r3, [r6, #0x70]
  00150	e5973288	 ldr         r3, [r7, #0x288]
  00154	e0833183	 add         r3, r3, r3, lsl #3
  00158	e0873183	 add         r3, r7, r3, lsl #3
  0015c	e5932008	 ldr         r2, [r3, #8]
  00160	e5933004	 ldr         r3, [r3, #4]
  00164	e2422001	 sub         r2, r2, #1
  00168	e2433001	 sub         r3, r3, #1
  0016c	e1833802	 orr         r3, r3, r2, lsl #16
  00170	e586307c	 str         r3, [r6, #0x7C]
  00174	eb000000	 bl          MmUnmapIoSpace

; 424  : 
; 425  : 
; 426  :     // Set initial power level
; 427  :     LcdPdd_SetPowerLevel(D0);

  00178	e3a00000	 mov         r0, #0
  0017c	eb000000	 bl          LcdPdd_SetPowerLevel

; 428  :   
; 429  :     return TRUE;

  00180	e3a00001	 mov         r0, #1

; 430  : }

  00184	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00188	e12fff1e	 bx          lr
  0018c		 |$LN10@LcdPdd_LCD@3|
  0018c		 |$LN11@LcdPdd_LCD@3|
  0018c	00000000	 DCD         |lcd_res_params|
  00190		 |$LN12@LcdPdd_LCD@3|
  00190	00000000	 DCD         |g_pDispRegs|
  00194		 |$M46389|

			 ENDP  ; |LcdPdd_LCD_Initialize|

	END
